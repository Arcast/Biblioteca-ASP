@model Entidad.ViewsModels.VM_Estudiantes.VM_GuardarEstudiante

<!-- Modal -->
<div class="modal-dialog" role="document">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title" id="exampleModalLabel">Guardar Estudiante</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="modal-body">

            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.CI, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CI, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CI, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Direccion, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Direccion, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Direccion, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Carrera, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Carrera, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Carrera, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Edad, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Edad, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Edad, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <button type="submit" id="GuardarEstudiante" class="btn btn-primary" data-dismiss="modal">Guardar</button>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>
   
<script>
        $(document).ready(function () {
            //Guardar el Estudiante
            $('#GuardarEstudiante').click(function (event) {
                event.preventDefault();
                var CI = $("#CI").val();
                var Nombre = $("#Nombre").val();
                var Direccion = $("#Direccion").val();
                var Carrera = $("#Carrera").val();
                var Edad = $("#Edad").val();

                var DatoJson =
                {
                    estud:
                    {
                        CI: CI,
                        Nombre: Nombre,
                        Direccion: Direccion,
                        Carrera: Carrera,
                        Edad: Edad
                    }
                }

                $.ajax(
                    {
                        type: "POST",
                        url: '@Url.Action("GuardarEstudiante","Estudiantes")',
                        data: JSON.stringify(DatoJson),
                        dataType: 'JSON',
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            //alert("Estudiante guardado correctamente...!");  
                            @*$.get('@Url.Action("Index", "Estudiantes")').fail(function (jqXHR, TextStatus, errorThrown) {
                                       error(jqXHR,TextStatus,errorThrown)
                                });*@
                            location.reload();
                        },
                        error: function (jqXHR, TextStatus, errorThrow) {
                            Error(jqXHR, TextStatus, errorThrow);
                        }
                    }
                ).done(function (result) {
                    console.log(result);
                });

            });
        });

        function error(jqXHR, TextStatus, errorThrown) {
            if (jqXHR === 0) {
                alert('Not connect: verify Network');
            } else if (jqXHR.status === 404) {
                alert('Requested page not found [404]');
            } else if (jqXHR.status === 500) {
                alert('Internal server error [500]');
            } else if (TextStatus === 'pasererror') {
                alert('Request Json parse failed');
            } else if (TextStatus === 'timeout') {
                alert('Time out error');
            } else if (TextStatus === 'abort') {
                alert('Ajax request aborted');
            } else {
                alert('Uncaught Error : ' + jqXHR.responseText);
            }
        }
</script>

